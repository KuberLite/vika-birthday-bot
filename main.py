"""
Telegram-–±–æ—Ç –¥–ª—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –í–∏–∫–∏ –ë–æ—Ç–Ω–∞—Ä—å
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
"""
import asyncio
import logging
import sys
from pathlib import Path

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

from config.settings import (
    BOT_TOKEN, 
    ERROR_LOG_PATH, 
    SCHEDULER_TIMEZONE,
    ADMIN_IDS
)
from handlers import (
    start,
    menu,
    wishes,
    album,
    admin,
    utils,
    songs
)
from handlers.utils import setup_scheduler_jobs, init_database


async def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(ERROR_LOG_PATH, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
    logging.getLogger('aiogram').setLevel(logging.WARNING)
    logging.getLogger('apscheduler').setLevel(logging.WARNING)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    await setup_logging()
    logger = logging.getLogger(__name__)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        bot = Bot(
            token=BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
        try:
            bot_info = await bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username} ({bot_info.first_name})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
            raise
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º scheduler
        scheduler = AsyncIOScheduler(timezone=SCHEDULER_TIMEZONE)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã (admin –∏ songs –ø–µ—Ä–≤—ã–º–∏ –¥–ª—è FSM, wishes –ø–µ—Ä–µ–¥ album)
        logger.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã...")
        dp.include_router(admin.router)
        logger.info("‚úÖ admin.router –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        dp.include_router(songs.router)
        logger.info("‚úÖ songs.router –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        dp.include_router(start.router)
        logger.info("‚úÖ start.router –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        dp.include_router(menu.router)
        logger.info("‚úÖ menu.router –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        dp.include_router(wishes.router)
        logger.info("‚úÖ wishes.router –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        dp.include_router(album.router)
        logger.info("‚úÖ album.router –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        dp.include_router(utils.router)
        logger.info("‚úÖ utils.router –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –£–±–∏—Ä–∞–µ–º debug –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –æ–Ω –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        # @dp.message()
        # async def debug_all_messages(message):
        #     logger.info(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '{message.text}' –æ—Ç {message.from_user.id}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º scheduled jobs
        await setup_scheduler_jobs(scheduler, bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º scheduler
        scheduler.start()
        
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_IDS}")
        
        # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üîÑ Webhook —É–¥–∞–ª–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º polling")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
        await dp.start_polling(bot, polling_timeout=10)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
    finally:
        if 'scheduler' in locals():
            scheduler.shutdown()
        if 'bot' in locals():
            await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
