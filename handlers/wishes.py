"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
"""
import logging
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config.texts import (
    WISH_INSTRUCTIONS,
    WISH_SAVED,
    WISH_CANCELLED,
    CANCEL_BUTTON,
    MAIN_MENU_BUTTON
)
from handlers.utils import add_user, is_archive_mode

router = Router()
logger = logging.getLogger(__name__)


class WishStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π"""
    waiting_for_wish = State()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
wish_collectors = {}


async def start_wish_collection(message: Message, user_id: int, from_user=None, state: FSMContext = None):
    """–ù–∞—á–∞—Ç—å —Å–±–æ—Ä –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏
        from handlers.album import album_uploaders
        if user_id in album_uploaders:
            album_uploaders.pop(user_id, None)
            logger.info(f"üíå –û—á–∏—â–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        if is_archive_mode():
            await message.answer("üì¶ –§—É–Ω–∫—Ü–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –∞—Ä—Ö–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ.")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º from_user –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∞—á–µ message.from_user
        user_info = from_user or message.from_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await add_user(
            user_id=user_id,
            username=user_info.username,
            first_name=user_info.first_name,
            last_name=user_info.last_name
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        builder.button(text=CANCEL_BUTTON, callback_data="cancel_wish")
        
        await message.answer(
            WISH_INSTRUCTIONS,
            reply_markup=builder.as_markup()
        )
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–±–∏—Ä–∞–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
        wish_collectors[user_id] = True
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        if state:
            await state.set_state(WishStates.waiting_for_wish)
            logger.info(f"üíå –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_wish_collection: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "cancel_wish")
async def cancel_wish(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        user_id = callback.from_user.id
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–±–∏—Ä–∞—é—â–∏—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
        wish_collectors.pop(user_id, None)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        from handlers.menu import get_back_to_menu_keyboard
        
        await callback.message.edit_text(
            WISH_CANCELLED,
            reply_markup=get_back_to_menu_keyboard()
        )
        await callback.answer()
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_wish: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(F.text, WishStates.waiting_for_wish)
async def handle_text_wish(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ"""
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–±–∏—Ä–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
        if user_id not in wish_collectors:
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        logger.info(f"üîç DEBUG: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç user_id={user_id}, from_user_id={message.from_user.id}")
        await save_wish(user_id, 'text', message.text)
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–±–∏—Ä–∞—é—â–∏—Ö
        wish_collectors.pop(user_id, None)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        from handlers.menu import get_back_to_menu_keyboard
        
        await message.answer(
            WISH_SAVED,
            reply_markup=get_back_to_menu_keyboard()
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_wish: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.")


@router.message(F.photo, WishStates.waiting_for_wish)
async def handle_photo_wish(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ"""
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–±–∏—Ä–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
        if user_id not in wish_collectors:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file_id = photo.file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        await save_wish(user_id, 'photo', file_id)
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–±–∏—Ä–∞—é—â–∏—Ö
        wish_collectors.pop(user_id, None)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        from handlers.menu import get_back_to_menu_keyboard
        
        await message.answer(
            WISH_SAVED,
            reply_markup=get_back_to_menu_keyboard()
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_photo_wish: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.")


@router.message(F.video, WishStates.waiting_for_wish)
async def handle_video_wish(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ"""
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–±–∏—Ä–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
        if user_id not in wish_collectors:
            return
        
        file_id = message.video.file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        await save_wish(user_id, 'video', file_id)
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–±–∏—Ä–∞—é—â–∏—Ö
        wish_collectors.pop(user_id, None)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        from handlers.menu import get_back_to_menu_keyboard
        
        await message.answer(
            WISH_SAVED,
            reply_markup=get_back_to_menu_keyboard()
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_video_wish: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.")


@router.message(F.voice, WishStates.waiting_for_wish)
async def handle_voice_wish(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ"""
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–±–∏—Ä–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
        if user_id not in wish_collectors:
            return
        
        file_id = message.voice.file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        await save_wish(user_id, 'voice', file_id)
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–±–∏—Ä–∞—é—â–∏—Ö
        wish_collectors.pop(user_id, None)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        from handlers.menu import get_back_to_menu_keyboard
        
        await message.answer(
            WISH_SAVED,
            reply_markup=get_back_to_menu_keyboard()
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_voice_wish: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.")


@router.message(F.sticker, WishStates.waiting_for_wish)
async def handle_sticker_wish(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ —Å—Ç–∏–∫–µ—Ä–æ–º"""
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–±–∏—Ä–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
        if user_id not in wish_collectors:
            return
        
        file_id = message.sticker.file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        await save_wish(user_id, 'sticker', file_id)
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–±–∏—Ä–∞—é—â–∏—Ö
        wish_collectors.pop(user_id, None)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        from handlers.menu import get_back_to_menu_keyboard
        
        await message.answer(
            WISH_SAVED,
            reply_markup=get_back_to_menu_keyboard()
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ —Å—Ç–∏–∫–µ—Ä–æ–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_sticker_wish: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.")


async def save_wish(user_id: int, content_type: str, content: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î"""
    try:
        import aiosqlite
        from config.settings import DATABASE_PATH
        
        async with aiosqlite.connect(DATABASE_PATH) as db:
            await db.execute("""
                INSERT INTO wishes (user_id, content_type, content, is_anonymous, delivered)
                VALUES (?, ?, ?, 0, 0)
            """, (user_id, content_type, content))
            await db.commit()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        raise


@router.message(Command("cancel"))
async def cmd_cancel(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã"""
    try:
        user_id = message.from_user.id
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–±–∏—Ä–∞—é—â–∏—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
        if user_id in wish_collectors:
            wish_collectors.pop(user_id, None)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            from handlers.menu import get_back_to_menu_keyboard
            
            await message.answer(
                WISH_CANCELLED,
                reply_markup=get_back_to_menu_keyboard()
            )
        else:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_cancel: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

