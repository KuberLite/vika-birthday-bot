"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º
"""
import logging
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config.texts import (
    ALBUM_INSTRUCTIONS,
    ALBUM_FILE_SAVED,
    ALBUM_LIMIT_REACHED,
    CANCEL_BUTTON,
    MAIN_MENU_BUTTON
)
from config.settings import MAX_FILES_PER_USER, ALBUM_DELAY_DAYS
from handlers.utils import add_user, is_after_birthday, get_days_until_birthday

router = Router()
logger = logging.getLogger(__name__)


class AlbumStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –∞–ª—å–±–æ–º"""
    uploading_files = State()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç —Ñ–∞–π–ª—ã
album_uploaders = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∏–∑–±–µ–≥–∞–µ–º —Å–ø–∞–º)
last_notifications = {}


async def start_album_upload(message: Message, user_id: int, from_user=None, state: FSMContext = None):
    """–ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –≤ –∞–ª—å–±–æ–º"""
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        from handlers.wishes import wish_collectors
        if user_id in wish_collectors:
            wish_collectors.pop(user_id, None)
            logger.info(f"üì∏ –û—á–∏—â–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # if not is_after_birthday():
        #     await message.answer("üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞! –ê–ª—å–±–æ–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è 25 –º–∞—è 2025 –≥–æ–¥–∞.")
        #     return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º from_user –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∞—á–µ message.from_user
        user_info = from_user or message.from_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await add_user(
            user_id=user_id,
            username=user_info.username,
            first_name=user_info.first_name,
            last_name=user_info.last_name
        )
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–∞ —Ñ–∞–π–ª–æ–≤
        # user_files_count = await get_user_files_count(user_id)
        # if user_files_count >= MAX_FILES_PER_USER:
        #     days_left = ALBUM_DELAY_DAYS - get_days_until_birthday()
        #     await message.answer(ALBUM_LIMIT_REACHED.format(days=days_left))
        #     return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        builder.button(text=CANCEL_BUTTON, callback_data="cancel_album")
        
        # –£–±–∏—Ä–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤
        instructions = ALBUM_INSTRUCTIONS
        
        await message.answer(
            instructions,
            reply_markup=builder.as_markup()
        )
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã
        album_uploaders[user_id] = True
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        if state:
            await state.set_state(AlbumStates.uploading_files)
            logger.info(f"üì∏ –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        logger.info(f"üì∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∑–∫—É –≤ –∞–ª—å–±–æ–º, album_uploaders={album_uploaders}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_album_upload: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "cancel_album")
async def cancel_album_upload(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤ –∞–ª—å–±–æ–º"""
    try:
        user_id = callback.from_user.id
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–∞—é—â–∏—Ö
        album_uploaders.pop(user_id, None)
        
        await callback.message.edit_text("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –∞–ª—å–±–æ–º –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await callback.answer()
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–≥—Ä—É–∑–∫—É –≤ –∞–ª—å–±–æ–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_album_upload: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(F.photo, AlbumStates.uploading_files)
async def handle_album_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∞–ª—å–±–æ–º–∞"""
    try:
        user_id = message.from_user.id
        
        logger.info(f"üì∏ DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, album_uploaders={album_uploaders}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–∞–π–ª—ã
        if user_id not in album_uploaders:
            logger.info(f"üì∏ DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–≥—Ä—É–∂–∞—é—â–∏—Ö")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file_id = photo.file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ë–î
        await save_album_file(user_id, 'photo', file_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 3 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        import time
        current_time = time.time()
        should_notify = True
        
        if user_id in last_notifications:
            if current_time - last_notifications[user_id] < 3:  # 3 —Å–µ–∫—É–Ω–¥—ã
                should_notify = False
        
        if should_notify:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            from handlers.menu import get_back_to_menu_keyboard
            
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            await message.answer(
                "‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞–ª—å–±–æ–º!",
                reply_markup=get_back_to_menu_keyboard()
            )
            last_notifications[user_id] = current_time
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_album_photo: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.")


@router.message(F.video)
async def handle_album_video(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –∞–ª—å–±–æ–º–∞"""
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–∞–π–ª—ã
        if user_id not in album_uploaders:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º file_id –≤–∏–¥–µ–æ
        file_id = message.video.file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ë–î
        await save_album_file(user_id, 'video', file_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 3 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        import time
        current_time = time.time()
        should_notify = True
        
        if user_id in last_notifications:
            if current_time - last_notifications[user_id] < 3:  # 3 —Å–µ–∫—É–Ω–¥—ã
                should_notify = False
        
        if should_notify:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            from handlers.menu import get_back_to_menu_keyboard
            
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            await message.answer(
                "‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞–ª—å–±–æ–º!",
                reply_markup=get_back_to_menu_keyboard()
            )
            last_notifications[user_id] = current_time
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≥—Ä—É–∑–∏–ª –≤–∏–¥–µ–æ –≤ –∞–ª—å–±–æ–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_album_video: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.")


@router.message(F.voice)
async def handle_album_voice(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–ª—å–±–æ–º–∞"""
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–∞–π–ª—ã
        if user_id not in album_uploaders:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º file_id –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        file_id = message.voice.file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ë–î
        await save_album_file(user_id, 'voice', file_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 3 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        import time
        current_time = time.time()
        should_notify = True
        
        if user_id in last_notifications:
            if current_time - last_notifications[user_id] < 3:  # 3 —Å–µ–∫—É–Ω–¥—ã
                should_notify = False
        
        if should_notify:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            from handlers.menu import get_back_to_menu_keyboard
            
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            await message.answer(
                "‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞–ª—å–±–æ–º!",
                reply_markup=get_back_to_menu_keyboard()
            )
            last_notifications[user_id] = current_time
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≥—Ä—É–∑–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤ –∞–ª—å–±–æ–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_album_voice: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")


async def get_user_files_count(user_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–ª—å–±–æ–º–µ"""
    try:
        import aiosqlite
        from config.settings import DATABASE_PATH
        
        async with aiosqlite.connect(DATABASE_PATH) as db:
            async with db.execute("""
                SELECT COUNT(*) FROM album_files WHERE user_id = ?
            """, (user_id,)) as cursor:
                row = await cursor.fetchone()
                return row[0] if row else 0
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        return 0


async def save_album_file(user_id: int, file_type: str, file_id: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∞–ª—å–±–æ–º–∞ –≤ –ë–î"""
    try:
        import aiosqlite
        from config.settings import DATABASE_PATH
        
        async with aiosqlite.connect(DATABASE_PATH) as db:
            await db.execute("""
                INSERT INTO album_files (user_id, file_id, file_type)
                VALUES (?, ?, ?)
            """, (user_id, file_id, file_type))
            await db.commit()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∞–ª—å–±–æ–º–∞: {e}")
        raise


@router.message(Command("cancel"))
async def cmd_cancel_album(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∞–ª—å–±–æ–º"""
    try:
        user_id = message.from_user.id
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–∞—é—â–∏—Ö
        if user_id in album_uploaders:
            album_uploaders.pop(user_id, None)
            await message.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –∞–ª—å–±–æ–º –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_cancel_album: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

