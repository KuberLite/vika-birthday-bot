"""
–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
"""
import logging
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext

from config.texts import (
    MAIN_MENU_MESSAGE,
    MAIN_MENU_BUTTONS,
    PARTY_LOCATION,
    PARTY_TIME,
    WHAT_TO_BRING,
    WISHLIST,
    ALBUM_NOT_READY,
    ARCHIVE_MODE,
    GUEST_CONFIRMED,
    GUEST_ALREADY_CONFIRMED
)
from handlers.utils import (
    get_days_until_birthday,
    is_archive_mode,
    is_after_birthday,
    get_guest_count,
    confirm_guest_participation,
    is_guest_confirmed
)

router = Router()
logger = logging.getLogger(__name__)


def get_back_to_menu_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    return builder.as_markup()


async def show_main_menu(message: Message, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        if is_archive_mode():
            await message.answer(ARCHIVE_MODE)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
        days_left = get_days_until_birthday()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º
        builder = InlineKeyboardBuilder()
        
        for row in MAIN_MENU_BUTTONS:
            for button_text in row:
                # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
                if "{days}" in button_text:
                    button_text = button_text.format(days=days_left)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback_data –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
                if "–ì–¥–µ –±—É–¥–µ—Ç —Ç—É—Å–æ–≤–∫–∞?" in button_text:
                    builder.button(text=button_text, callback_data="party_location")
                elif "–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ?" in button_text:
                    builder.button(text=button_text, callback_data="party_time")
                elif "–ß—Ç–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π?" in button_text:
                    builder.button(text=button_text, callback_data="what_to_bring")
                elif "–í–∏—à–ª–∏—Å—Ç" in button_text:
                    builder.button(text=button_text, callback_data="wishlist")
                elif "–ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å –í–∏–∫—É" in button_text:
                    builder.button(text=button_text, callback_data="send_wish")
                elif "—Ñ–æ—Ç–∫–∏" in button_text:
                    if is_after_birthday():
                        builder.button(text=button_text, callback_data="upload_photos")
                    else:
                        builder.button(text=button_text, callback_data="album_not_ready")
                elif "–í–∏–∫–∞-–≥–∞–¥–∞–ª–∫–∞" in button_text:
                    builder.button(text=button_text, callback_data="fortune")
                elif "–Ø –±—É–¥—É" in button_text:
                    builder.button(text=button_text, callback_data="confirm_attendance")
                elif "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–µ–∫" in button_text or "–∫–∞—Ä–∞–æ–∫–µ" in button_text:
                    builder.button(text=button_text, callback_data="song_request")
                elif "–î–æ –î–†:" in button_text:
                    builder.button(text=button_text, callback_data="birthday_timer")
        
        builder.adjust(2)
        
        await message.answer(
            MAIN_MENU_MESSAGE,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_main_menu: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")


@router.callback_query(F.data == "party_location")
async def show_party_location(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"""
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        await callback.message.answer_location(
            latitude=53.832189,
            longitude=27.537568
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∞–¥—Ä–µ—Å–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        await callback.message.answer(
            PARTY_LOCATION,
            reply_markup=get_back_to_menu_keyboard()
        )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_party_location: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "party_time")
async def show_party_time(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"""
    try:
        await callback.message.edit_text(
            PARTY_TIME,
            reply_markup=get_back_to_menu_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_party_time: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "what_to_bring")
async def show_what_to_bring(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π"""
    try:
        await callback.message.edit_text(
            WHAT_TO_BRING,
            reply_markup=get_back_to_menu_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_what_to_bring: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "wishlist")
async def show_wishlist(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏—à–ª–∏—Å—Ç"""
    try:
        await callback.message.edit_text(
            WISHLIST,
            reply_markup=get_back_to_menu_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_wishlist: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "send_wish")
async def start_send_wish(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from handlers.wishes import start_wish_collection
        
        await start_wish_collection(callback.message, callback.from_user.id, callback.from_user, state)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_send_wish: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "album_not_ready")
async def show_album_not_ready(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –∞–ª—å–±–æ–º –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"""
    try:
        await callback.message.edit_text(
            ALBUM_NOT_READY,
            reply_markup=get_back_to_menu_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_album_not_ready: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "upload_photos")
async def start_upload_photos(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ"""
    try:
        logger.info(f"üì∏ DEBUG: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ upload_photos –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from handlers.album import start_album_upload
        
        await start_album_upload(callback.message, callback.from_user.id, callback.from_user, state)
        await callback.answer()
        
        logger.info(f"üì∏ DEBUG: start_album_upload –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_upload_photos: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "fortune")
async def show_fortune(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–∞–¥–∞–Ω–∏–µ"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from handlers.utils import get_random_fortune
        
        fortune = get_random_fortune()
        await callback.message.edit_text(
            fortune,
            reply_markup=get_back_to_menu_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_fortune: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "confirm_attendance")
async def confirm_attendance(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –≤–µ—á–µ—Ä–∏–Ω–∫–µ"""
    try:
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–∏–µ
        already_confirmed = await is_guest_confirmed(user_id)
        count = await get_guest_count()
        
        if already_confirmed:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ
            message_text = GUEST_ALREADY_CONFIRMED.format(count=count)
        else:
            # –ù–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            success = await confirm_guest_participation(user_id)
            if success:
                count = await get_guest_count()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                message_text = GUEST_CONFIRMED.format(count=count)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ –≤ –≤–µ—á–µ—Ä–∏–Ω–∫–µ")
            else:
                message_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É—á–∞—Å—Ç–∏—è"
        
        await callback.message.edit_text(
            message_text,
            reply_markup=get_back_to_menu_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_attendance: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "song_request")
async def show_song_request(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–∞"""
    try:
        logger.info(f"üéµ –û–±—Ä–∞–±–æ—Ç–∫–∞ song_request –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        from config.texts import SONG_REQUEST
        from handlers.songs import SongStates
        
        await callback.message.edit_text(
            SONG_REQUEST,
            reply_markup=get_back_to_menu_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
        await state.set_state(SongStates.waiting_for_song)
        logger.info(f"üéµ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_song_request: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "back_to_menu")
async def handle_back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
        await state.clear()
        await show_main_menu(callback.message, callback.from_user.id)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_back_to_menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "birthday_timer")
async def show_birthday_timer(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–π–º–µ—Ä –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        days_left = get_days_until_birthday()
        
        if days_left > 0:
            message_text = f"‚è≥ –î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –í–∏–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π! üéÇ"
        elif days_left == 0:
            message_text = "üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –í–∏–∫–∏! üéÇüéâ"
        else:
            message_text = f"üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –í–∏–∫–∏ –±—ã–ª {abs(days_left)} –¥–Ω–µ–π –Ω–∞–∑–∞–¥! üéâ"
        
        await callback.message.edit_text(
            message_text,
            reply_markup=get_back_to_menu_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_birthday_timer: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await show_main_menu(callback.message, callback.from_user.id)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_main_menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)