"""
–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
"""
import logging
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config.settings import ADMIN_IDS
from config.texts import (
    ADMIN_ONLY,
    PRESENTS_SENT,
    ALBUM_SENT,
    STATS_MESSAGE
)
from handlers.utils import (
    send_birthday_wishes, create_album, get_confirmed_guests_list, get_all_users_stats,
    add_wishlist_item, get_wishlist_items, delete_wishlist_item, format_wishlist
)

router = Router()
logger = logging.getLogger(__name__)


class WishlistStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏—à–ª–∏—Å—Ç–æ–º"""
    waiting_for_item = State()
    waiting_for_delete_id = State()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞: user_id={user_id}, ADMIN_IDS={ADMIN_IDS}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç={user_id in ADMIN_IDS}")
    return user_id in ADMIN_IDS


@router.message(F.text == "/open_presents")
async def cmd_open_presents(message: Message, bot: Bot):
    """–í—Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        user_id = message.from_user.id
        
        if not is_admin(user_id):
            await message.answer(ADMIN_ONLY)
            return
        
        await message.answer("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
        await send_birthday_wishes(bot)
        
        await message.answer("‚úÖ –í—Å–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        
        logger.info(f"–ê–¥–º–∏–Ω {user_id} –≤—Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_open_presents: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π.")


@router.message(F.text == "/get_album")
async def cmd_get_album(message: Message, bot: Bot):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–π –∞–ª—å–±–æ–º"""
    try:
        user_id = message.from_user.id
        
        if not is_admin(user_id):
            await message.answer(ADMIN_ONLY)
            return
        
        await message.answer("üì∏ –°–æ–∑–¥–∞—é –∞–ª—å–±–æ–º...")
        
        # –°–æ–∑–¥–∞–µ–º –∞–ª—å–±–æ–º
        await create_album(bot)
        
        await message.answer("‚úÖ –ê–ª—å–±–æ–º —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
        logger.info(f"–ê–¥–º–∏–Ω {user_id} –≤—Ä—É—á–Ω—É—é —Å–æ–∑–¥–∞–ª –∞–ª—å–±–æ–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_get_album: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–ª—å–±–æ–º–∞.")


@router.message(F.text == "/stats")
async def cmd_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    try:
        user_id = message.from_user.id
        
        if not is_admin(user_id):
            await message.answer(ADMIN_ONLY)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_bot_stats()
        
        await message.answer(
            STATS_MESSAGE.format(
                users=stats['users'],
                wishes=stats['wishes'],
                files=stats['files'],
                songs=stats['songs'],
                timestamp=datetime.now().strftime("%d.%m.%Y %H:%M")
            )
        )
        
        logger.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_stats: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def get_bot_stats() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    try:
        import aiosqlite
        from config.settings import DATABASE_PATH
        
        async with aiosqlite.connect(DATABASE_PATH) as db:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with db.execute("SELECT COUNT(*) FROM users") as cursor:
                users_row = await cursor.fetchone()
                users = users_row[0] if users_row else 0
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
            async with db.execute("SELECT COUNT(*) FROM wishes") as cursor:
                wishes_row = await cursor.fetchone()
                wishes = wishes_row[0] if wishes_row else 0
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –∞–ª—å–±–æ–º–µ
            async with db.execute("SELECT COUNT(*) FROM album_files") as cursor:
                files_row = await cursor.fetchone()
                files = files_row[0] if files_row else 0
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ç—Ä–µ–∫–æ–≤
            async with db.execute("SELECT COUNT(*) FROM song_requests") as cursor:
                songs_row = await cursor.fetchone()
                songs = songs_row[0] if songs_row else 0
            
            return {
                'users': users,
                'wishes': wishes,
                'files': files,
                'songs': songs
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            'users': 0,
            'wishes': 0,
            'files': 0,
            'songs': 0
        }


@router.message(F.text == "/test")
async def cmd_test(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ä–æ—É—Ç–µ—Ä–∞"""
    logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {message.from_user.id}")
    await message.answer("‚úÖ –†–æ—É—Ç–µ—Ä –∞–¥–º–∏–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")


# –£–±–∏—Ä–∞–µ–º catch_all - –æ–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# @router.message()
# async def catch_all_admin_messages(message: Message):
#     """–õ–æ–≤–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
#     logger.info(f"üîç –ü–æ–π–º–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ admin.py: {message.text} –æ—Ç {message.from_user.id}")
#     # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º


@router.message(F.text == "/admin")
async def cmd_admin_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    try:
        user_id = message.from_user.id
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /admin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if not is_admin(user_id):
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
            await message.answer(ADMIN_ONLY)
            return
        
        help_text = """
üîß <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/users - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
/guests - –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö —É—á–∞—Å—Ç–∏–µ

üîç <b>–û—Ç–ª–∞–¥–∫–∞:</b>
/debug_wishes - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è

üéÅ <b>–î–µ–π—Å—Ç–≤–∏—è:</b>
/open_presents - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
/get_album - –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–π –∞–ª—å–±–æ–º
/get_song_requests - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤

üéÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–æ–º:</b>
/add_wishlist_item - –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –≤–∏—à–ª–∏—Å—Ç
/delete_wishlist_item - –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞
/show_wishlist_admin - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∏—à–ª–∏—Å—Ç —Å ID

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
/broadcast &lt;—Ç–µ–∫—Å—Ç&gt; - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
/set_start_photo yes|no - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ
/get_start_photos - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
/admin - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        """
        
        await message.answer(help_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_admin_help: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(F.text.startswith("/broadcast"))
async def cmd_broadcast(message: Message):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        user_id = message.from_user.id
        
        if not is_admin(user_id):
            await message.answer(ADMIN_ONLY)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = message.text.replace("/broadcast", "").strip()
        
        if not text:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n–ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        import aiosqlite
        from config.settings import DATABASE_PATH
        
        async with aiosqlite.connect(DATABASE_PATH) as db:
            async with db.execute("SELECT user_id FROM users") as cursor:
                user_ids = await cursor.fetchall()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        sent = 0
        failed = 0
        
        for user_id_tuple in user_ids:
            try:
                await message.bot.send_message(user_id_tuple[0], text)
                sent += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_tuple[0]}: {e}")
                failed += 1
        
        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n–û—à–∏–±–æ–∫: {failed}")
        
        logger.info(f"–ê–¥–º–∏–Ω {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É: {sent} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_broadcast: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.")


@router.message(F.text.startswith("/set_start_photo"))
async def cmd_set_start_photo(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –¥–∞/–Ω–µ—Ç"""
    try:
        user_id = message.from_user.id
        
        if not is_admin(user_id):
            await message.answer(ADMIN_ONLY)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ
        if not message.reply_to_message or not message.reply_to_message.photo:
            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π /set_start_photo yes –∏–ª–∏ /set_start_photo no")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ (yes/no)
        command_parts = message.text.split()
        if len(command_parts) != 2 or command_parts[1] not in ['yes', 'no']:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_start_photo yes –∏–ª–∏ /set_start_photo no")
            return
        
        response_type = command_parts[1]
        photo = message.reply_to_message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_id = photo.file_id
        caption = message.reply_to_message.caption or ""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        from handlers.utils import set_start_photo
        await set_start_photo(response_type, file_id, caption)
        
        await message.answer(f"‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ '{response_type}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        
        logger.info(f"–ê–¥–º–∏–Ω {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è {response_type}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_set_start_photo: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–æ—Ç–æ.")


@router.message(F.text == "/get_start_photos")
async def cmd_get_start_photos(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ"""
    try:
        user_id = message.from_user.id
        
        if not is_admin(user_id):
            await message.answer(ADMIN_ONLY)
            return
        
        from handlers.utils import get_start_photo
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è "–¥–∞"
        yes_file_id, yes_caption = await get_start_photo("yes")
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è "–Ω–µ—Ç"
        no_file_id, no_caption = await get_start_photo("no")
        
        response = "üì∏ <b>–¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ:</b>\n\n"
        
        if yes_file_id:
            response += "‚úÖ <b>–î–ª—è –æ—Ç–≤–µ—Ç–∞ '–î–∞':</b>\n"
            response += f"ID: <code>{yes_file_id}</code>\n"
            if yes_caption:
                response += f"–ü–æ–¥–ø–∏—Å—å: {yes_caption}\n"
            response += "\n"
        else:
            response += "‚ùå <b>–î–ª—è –æ—Ç–≤–µ—Ç–∞ '–î–∞':</b> —Ñ–æ—Ç–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n\n"
        
        if no_file_id:
            response += "‚ùå <b>–î–ª—è –æ—Ç–≤–µ—Ç–∞ '–ù–µ—Ç':</b>\n"
            response += f"ID: <code>{no_file_id}</code>\n"
            if no_caption:
                response += f"–ü–æ–¥–ø–∏—Å—å: {no_caption}\n"
        else:
            response += "‚ùå <b>–î–ª—è –æ—Ç–≤–µ—Ç–∞ '–ù–µ—Ç':</b> —Ñ–æ—Ç–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_get_start_photos: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.")


@router.message(F.text == "/get_song_requests")
async def cmd_get_song_requests(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤"""
    try:
        user_id = message.from_user.id
        
        if not is_admin(user_id):
            await message.answer(ADMIN_ONLY)
            return
        
        from handlers.utils import get_all_song_requests
        
        requests = await get_all_song_requests()
        
        if not requests:
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ç—Ä–µ–∫–æ–≤.")
            return
        
        response = "üéµ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤:</b>\n\n"
        
        for i, (track, first_name, username, timestamp) in enumerate(requests, 1):
            user_name = first_name or username or "–ê–Ω–æ–Ω–∏–º"
            response += f"{i}. <b>{track}</b>\n"
            response += f"   üë§ {user_name}\n"
            response += f"   üìÖ {timestamp}\n\n"
        
        response += f"<b>–í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:</b> {len(requests)}"
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_get_song_requests: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ç—Ä–µ–∫–æ–≤.")


@router.message(F.text == "/debug_wishes")
async def cmd_debug_wishes(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        user_id = message.from_user.id
        
        if not is_admin(user_id):
            await message.answer(ADMIN_ONLY)
            return
        
        import aiosqlite
        from config.settings import DATABASE_PATH
        
        async with aiosqlite.connect(DATABASE_PATH) as db:
            async with db.execute("""
                SELECT w.user_id, w.content_type, w.content, u.first_name, u.username, w.timestamp
                FROM wishes w
                LEFT JOIN users u ON w.user_id = u.user_id
                ORDER BY w.timestamp DESC
                LIMIT 10
            """) as cursor:
                wishes = await cursor.fetchall()
        
        if not wishes:
            await message.answer("üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π.")
            return
        
        response = "üîç <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
        
        for wish in wishes:
            user_id_db, content_type, content, first_name, username, timestamp = wish
            user_name = first_name or username or "–ù–µ—Ç –∏–º–µ–Ω–∏"
            content_preview = content[:50] + "..." if len(content) > 50 else content
            
            response += f"üë§ <b>User ID:</b> {user_id_db}\n"
            response += f"üìù <b>–ò–º—è:</b> {user_name}\n"
            response += f"üìÑ <b>–¢–∏–ø:</b> {content_type}\n"
            response += f"üí¨ <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b> {content_preview}\n"
            response += f"üìÖ <b>–í—Ä–µ–º—è:</b> {timestamp}\n\n"
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_debug_wishes: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π.")


@router.message(F.text == "/guests")
async def cmd_guests_list(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö —É—á–∞—Å—Ç–∏–µ"""
    if not is_admin(message.from_user.id):
        await message.answer(ADMIN_ONLY)
        return
    
    try:
        guests = await get_confirmed_guests_list()
        
        if not guests:
            await message.answer("üë• –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ –≤ –≤–µ—á–µ—Ä–∏–Ω–∫–µ")
            return
        
        text = f"üë• –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ ({len(guests)} —á–µ–ª.):\n\n"
        
        for i, guest in enumerate(guests, 1):
            text += f"{i}. {guest['display_name']}\n"
            text += f"   üìÖ {guest['confirmed_at'][:16]}\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ
        if len(text) > 4000:
            parts = []
            lines = text.split('\n\n')
            current_part = f"üë• –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ ({len(guests)} —á–µ–ª.):\n\n"
            
            for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(current_part + line + '\n\n') > 3800:
                    parts.append(current_part)
                    current_part = line + '\n\n'
                else:
                    current_part += line + '\n\n'
            
            if current_part.strip():
                parts.append(current_part)
            
            for part in parts:
                await message.answer(part)
        else:
            await message.answer(text)
        
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_guests_list: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Å—Ç–µ–π")


@router.message(F.text == "/users")
async def cmd_users_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"""
    if not is_admin(message.from_user.id):
        await message.answer(ADMIN_ONLY)
        return
    
    try:
        stats = await get_all_users_stats()
        
        if not stats:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}

üí≠ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å "–ü–æ–º–Ω–∏—à—å –í–∏–∫—É?":
‚úÖ –î–∞, –ø–æ–º–Ω—é: {stats['remembers_vika']}
‚ùå –ù–µ—Ç, –Ω–µ –ø–æ–º–Ω—é: {stats['not_remembers_vika']}
‚ùì –ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏: {stats['no_answer']}

üéâ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
üíå –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['wishes_count']}
üì∏ –§–∞–π–ª–æ–≤ –≤ –∞–ª—å–±–æ–º–µ: {stats['album_files_count']}
üéµ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ç—Ä–µ–∫–æ–≤: {stats['songs_count']}
üë• –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ: {stats['confirmed_guests_count']}

üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏:
–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {round(stats['wishes_count'] / max(stats['total_users'], 1) * 100, 1)}%
–£—á–∞—Å—Ç–∏–µ: {round(stats['confirmed_guests_count'] / max(stats['total_users'], 1) * 100, 1)}%"""
        
        await message.answer(text)
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_users_stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ò–®–õ–ò–°–¢–û–ú ===

@router.message(F.text == "/add_wishlist_item")
async def cmd_add_wishlist_item(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –≤–∏—à–ª–∏—Å—Ç"""
    try:
        user_id = message.from_user.id
        
        if not is_admin(user_id):
            await message.answer(ADMIN_ONLY)
            return
        
        await message.answer(
            "üéÅ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –≤–∏—à–ª–∏—Å—Ç\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≤–∏—à–ª–∏—Å—Ç –í–∏–∫–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        
        await state.set_state(WishlistStates.waiting_for_item)
        logger.info(f"–ê–¥–º–∏–Ω {user_id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –≤–∏—à–ª–∏—Å—Ç")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_add_wishlist_item: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(F.text, WishlistStates.waiting_for_item)
async def handle_add_wishlist_item(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –≤–∏—à–ª–∏—Å—Ç"""
    try:
        user_id = message.from_user.id
        
        if not is_admin(user_id):
            await message.answer(ADMIN_ONLY)
            await state.clear()
            return
        
        item_text = message.text.strip()
        
        if not item_text:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        success = await add_wishlist_item(item_text, user_id)
        
        if success:
            await message.answer(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∏—à–ª–∏—Å—Ç:\n\nüìù {item_text}")
            logger.info(f"–ê–¥–º–∏–Ω {user_id} –¥–æ–±–∞–≤–∏–ª —ç–ª–µ–º–µ–Ω—Ç –≤ –≤–∏—à–ª–∏—Å—Ç: {item_text}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –≤–∏—à–ª–∏—Å—Ç.")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_add_wishlist_item: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞.")
        await state.clear()


@router.message(F.text == "/show_wishlist_admin")
async def cmd_show_wishlist_admin(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏—à–ª–∏—Å—Ç —Å ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        user_id = message.from_user.id
        
        if not is_admin(user_id):
            await message.answer(ADMIN_ONLY)
            return
        
        items = await get_wishlist_items()
        
        if not items:
            await message.answer("üì≠ –í–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç.")
            return
        
        response = "üéÅ <b>–í–∏—à–ª–∏—Å—Ç –í–∏–∫–∏ (–∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º):</b>\n\n"
        
        for item_id, text, timestamp in items:
            response += f"<b>ID {item_id}:</b> {text}\n"
            response += f"üìÖ {timestamp[:16]}\n\n"
        
        response += f"<b>–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:</b> {len(items)}\n\n"
        response += "üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        response += "/add_wishlist_item - –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç\n"
        response += "/delete_wishlist_item - —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç"
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_show_wishlist_admin: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏—à–ª–∏—Å—Ç–∞.")


@router.message(F.text == "/delete_wishlist_item")
async def cmd_delete_wishlist_item(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞"""
    try:
        user_id = message.from_user.id
        
        if not is_admin(user_id):
            await message.answer(ADMIN_ONLY)
            return
        
        items = await get_wishlist_items()
        
        if not items:
            await message.answer("üì≠ –í–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç - –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
            return
        
        response = "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞</b>\n\n"
        response += "–í—ã–±–µ—Ä–∏—Ç–µ ID —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        
        for item_id, text, timestamp in items:
            response += f"<b>ID {item_id}:</b> {text}\n\n"
        
        response += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —ç–ª–µ–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.\n"
        response += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        
        await message.answer(response)
        await state.set_state(WishlistStates.waiting_for_delete_id)
        logger.info(f"–ê–¥–º–∏–Ω {user_id} –Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_delete_wishlist_item: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(F.text, WishlistStates.waiting_for_delete_id)
async def handle_delete_wishlist_item(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞"""
    try:
        user_id = message.from_user.id
        
        if not is_admin(user_id):
            await message.answer(ADMIN_ONLY)
            await state.clear()
            return
        
        try:
            item_id = int(message.text.strip())
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —ç–ª–µ–º–µ–Ω—Ç–∞.")
            return
        
        success = await delete_wishlist_item(item_id)
        
        if success:
            await message.answer(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç —Å ID {item_id} —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞.")
            logger.info(f"–ê–¥–º–∏–Ω {user_id} —É–¥–∞–ª–∏–ª —ç–ª–µ–º–µ–Ω—Ç ID {item_id} –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞")
        else:
            await message.answer(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_delete_wishlist_item: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞.")
        await state.clear()


@router.message(F.text == "/cancel")
async def cmd_cancel_admin(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∞"""
    try:
        user_id = message.from_user.id
        
        if not is_admin(user_id):
            await message.answer(ADMIN_ONLY)
            return
        
        current_state = await state.get_state()
        
        if current_state:
            await state.clear()
            await message.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            logger.info(f"–ê–¥–º–∏–Ω {user_id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
        else:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_cancel_admin: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

